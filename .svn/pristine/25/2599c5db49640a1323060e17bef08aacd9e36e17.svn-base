package rwb.servlet.machine;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.gson.Gson;

import rwb.java.bdd.bo.BddServeurBO;
import rwb.java.divers.Log;
import rwb.java.server.bo.ServeurBO;
import rwb.java.vb.bo.VirtualBoxBO;
import rwb.java.vb.dao.VirtualBoxDAO;

/**
 * Servlet implementation class DeleteMachine
 */
@WebServlet("/DeleteMachine")
public class DeleteMachine extends HttpServlet {
	private static final long serialVersionUID = 1L;
    /**
     * @see HttpServlet#HttpServlet()
     */
    public DeleteMachine() {
        super();
        
    }

	/**
	 * @see HttpServlet#service(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String serverId = (String)request.getParameter("delete-srv");
		String machineId = (String)request.getParameter("delete-vm");
		String mode = (String)request.getParameter("delete-vm-mode");
		Boolean error = false;
		VirtualBoxBO vbox = null;
		BddServeurBO bdd = null;
		List<ServeurBO> listServeur = null;
		
		try {
			Log.info("Try to delete VM ...");
			
			bdd = new BddServeurBO();
			listServeur = bdd.getServeurs("enabled");
			ServeurBO srv = ServeurBO.getServeur(listServeur, serverId);
			
			vbox = new VirtualBoxBO(new VirtualBoxDAO(srv),true);
			
			
			switch(mode){
			case "M":
				vbox.deleteMachine(machineId, "machine");
				break;
			case "M-HDD":
				vbox.deleteMachine(machineId, "machineAndHardDrive");
				break;
			case "M-HDD-ISO":
				vbox.deleteMachine(machineId, "machineAndHardDriveAndISO");
				break;
			default:
				break;
			}
			
			bdd.deleteMachine(machineId);

			
		
		} catch (Exception e) {
			error = true; 
			Log.warning(e.toString());
			throw new RuntimeException(e);
		
		}

		/**
		 * Response parse 
		 */
		HashMap<String,Object> resp = new HashMap<>();
		HashMap<String,Object> header = new HashMap<>();
		if(error){
			header.put("statut", "503");
			header.put("msg", "Machine not deleted");
		}else{
			header.put("statut", "200");
			header.put("msg", "Machine deleted");
		}
		
		header.put("srvId", serverId);
		header.put("vmId", machineId);
		
		HashMap<String,Object> data = new HashMap<>();

		
		resp.put("header", header);
		resp.put("data", data);
			
		
		Gson gson = new Gson(); 
		String json = gson.toJson(resp); 
			
		
		response.setStatus(HttpServletResponse.SC_OK);
		response.getWriter().write(json);
	}

}
